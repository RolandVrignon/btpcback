# NestJS Backend Context Prompt

Node version 20.13.0

## Tech Stack

- **Backend:** Node.js with Nest.js
- **Database:** PostgreSQL managed via Prisma
- **Authentication:** API Tokens

## Workflow Setup

- **Dependency Management:**
  - Use **pnpm** when adding new dependencies.
  - Ensure that development-only dependencies are marked with the appropriate flags.

## Coding Standards

- **Language:**
  - Use **TypeScript** for all new code.
  - Utilize proper TypeScript types for all variables, functions, and return types.
- **Imports:**
  - Employ **barrel imports** for centralized exports.
  - Always use **relative imports**.
- **Error Handling & Input Validation:**
  - Implement robust error handling and strict input validation.
- **Comments:**
  - All code comments must be written in **English**.

## Best Practices

- **Security & Efficiency:**
  - Write secure, efficient code following RESTful API best practices.
- **Architecture:**
  - Adhere to **SOLID principles** to ensure maintainability.
- **Readability & Performance:**
  - Focus on code readability and performance optimization.

## Additional Requirements

- **API Documentation:**
  - Implement a **Swagger interface** for API documentation.
  - Ensure that the Swagger setup is kept up-to-date with the API routes and models.
- **Testing & Mocks:**
  - Provide **mocks for services and controllers** to facilitate isolated testing.
  - Develop comprehensive **unit tests** for the various components of the backend, ensuring all business logic and API endpoints are covered.

## Organizational Principles

- **Separation of Concerns**: Each file has a distinct and well-defined role
- **Cohesion**: Related functionalities are grouped in the same module
- **Low Coupling**: Modules interact through well-defined interfaces
- **Testability**: Structure facilitates unit and integration testing
- **Reusability**: Common patterns are extracted into utilities and entities

## Module Structure Example

```
src/
└── users/
    ├── users.controller.ts
    ├── users.service.ts
    ├── users.repository.ts
    ├── user.interface.ts
    ├── users.module.ts
    ├── dto/
    │   ├── create-user.dto.ts
    │   ├── update-user.dto.ts
    │   └── index.ts
    ├── utils/
    │   ├── user-validators.util.ts
    │   ├── user-formatters.util.ts
    │   └── index.ts
    └── index.ts
```

This enhanced architecture provides a comprehensive structure for each module, ensuring proper organization of code while maintaining the benefits of the three-layer architecture (controller, service, repository) for maintainability, scalability, and testability, all while adhering to SOLID principles.

Ne te préoccupes pas des erreurs de lint. 