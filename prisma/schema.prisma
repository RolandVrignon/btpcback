// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  PENDING_REVIEW
  APPROVED
  COMPLETED
}

enum ProjectTag {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  RENOVATION
  NEW_CONSTRUCTION
  URGENT
  ECO_FRIENDLY
  HISTORIC
}

enum DocumentStatus {
  NOT_STARTED
  INDEXING
  RAFTING
  PROCESSING
  READY
  END
}

enum OrganizationScope {
  ADMIN
  REGULAR
}

model Organization {
  id        String            @id @default(uuid())
  name      String            @unique
  scope     OrganizationScope @default(REGULAR)
  apikeys   Apikey[]
  projects  Project[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Apikey {
  id             String       @id @default(uuid())
  key            String       @unique
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model Project {
  id             String       @id @default(uuid())
  name           String
  salesforce_id  String?
  ai_address     String?
  status         ProjectStatus @default(DRAFT)
  tags           ProjectTag[]
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  documents      Document[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model Document {
  id        String         @id @default(uuid())
  filename  String
  path      String
  mimetype  String
  size      Int
  status    DocumentStatus @default(NOT_STARTED)
  projectId String
  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chunks    Chunk[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([projectId])
}

model Chunk {
  id         String      @id @default(uuid())
  text       String
  page       Int?
  documentId String
  document   Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  embeddings Embedding[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([documentId])
  @@index([text], map: "chunk_text_idx")
}

model Embedding {
  id           String    @id @default(uuid())
  vector       Unsupported("vector(1536)")?
  modelName    String
  modelVersion String
  dimensions   Int
  chunkId      String
  chunk        Chunk     @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  usage        Int       @default(0)

  @@index([chunkId])
  @@index([vector], map: "embedding_vector_idx")
  @@unique([chunkId, modelName, modelVersion], name: "unique_chunk_model")
}