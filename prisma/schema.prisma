// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// Configuration du script seed
generator seed {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

enum Status {
  DRAFT // En cours de création/modification
  PROGRESS // En cours de traitement
  PENDING // En attente
  COMPLETED // Terminé
  ERROR // Erreur survenue
}

enum ProjectTag {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  RENOVATION
  NEW_CONSTRUCTION
  URGENT
  ECO_FRIENDLY
  HISTORIC
}

enum OrganizationScope {
  ADMIN
  REGULAR
}

enum UsageType {
  TEXT_TO_TEXT
  EMBEDDING
}

enum AI_Provider {
  NOT_SPECIFIED
  GEMINI
  OPENAI
  COHERE
  ANTHROPIC
  GROK
  LLAMA
  TOGETHERAI
  MISTRAL
  FIREWORKS
  DEEPSEEK
  OPENROUTER
}

enum DeliverableType {
  DOCUMENTS_PUBLIQUES // Public documents
  GEORISQUES // GEORISQUES
  DESCRIPTIF_SOMMAIRE_DES_TRAVAUX // DESCRIPTIF_SOMMAIRE_DES_TRAVAUX
  TABLEAU_DES_DOCUMENTS_EXAMINES // TABLEAU_DES_DOCUMENTS_EXAMINES
  COMPARATEUR_INDICES // COMPARATEUR_INDICES
  ANALYSE_ETHUDE_THERMIQUE // ANALYSE_ETHUDE_THERMIQUE
  INCOHERENCE_DE_DONNEES // INCOHERENCE_DE_DONNEES
}

enum DocumentCategory {
  PROJECT // Document lié au projet/chantier (CCTP, CCAP, plans, etc.)
  REFERENCE // Document de référence/normatif (DTU, normes, notices, etc.)
}

model Organization {
  id        String            @id @unique @default(uuid())
  name      String            @unique @db.VarChar(255)
  scope     OrganizationScope @default(REGULAR)
  apikeys   Apikey[]
  projects  Project[]
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  deletedAt DateTime?         @map("deleted_at")
  @@map("organization")
}

model Apikey {
  id             String       @id @unique @default(uuid())
  key            String       @unique @db.VarChar(255)
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@index([organizationId])
  @@map("apikey")
}

model Project {
  id                        String        @id @unique @default(uuid())
  name                      String        @default("New Project") @db.VarChar(255)
  short_summary             String?       @default("") @db.Text @map("short_summary")
  long_summary              String?       @default("") @db.Text @map("long_summary")
  salesforce_id             String?       @default("") @db.VarChar(255) @map("salesforce_id")
  ai_address                String?       @default("") @db.VarChar(255) @map("ai_address")
  ai_city                   String?       @default("") @db.VarChar(255) @map("ai_city")
  ai_zip_code               String?       @default("") @db.VarChar(10) @map("ai_zip_code")
  ai_country                String?       @default("") @db.VarChar(255) @map("ai_country")
  closest_formatted_address String?       @default("") @db.VarChar(255) @map("closest_formatted_address")
  latitude                  Float?        @default(0)
  longitude                 Float?        @default(0)
  altitude                  Float?        @default(0)
  status                    Status        @default(DRAFT)
  code                      Int?
  message                   String?
  tags                      ProjectTag[]
  organizationId            String        @db.VarChar(255) @map("organization_id")
  organization              Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  documents                 Document[]
  usages                    Usage[]
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  deliverables              Deliverable[]

  @@index([organizationId])
  @@map("project")
}

model Document {
  id       String @id @unique @default(uuid())
  filename String
  path     String
  mimetype String
  size     Int

  status                         Status  @default(DRAFT)
  message_status                 String?
  extraction_duration_in_seconds Float?  @default(0)

  indexation_status              Status  @default(DRAFT)
  message_indexation             String?
  indexation_duration_in_seconds Float?  @default(0)

  code Int?

  category DocumentCategory @default(PROJECT)

  projectId String @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chunks    Chunk[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // AI analysis fields
  ai_titre_document            String?               @default("") @map("ai_titre_document")
  ai_lot_identification        String[]              @default([]) @map("ai_lot_identification")
  ai_Type_batiment             String[]              @default([]) @map("ai_type_batiment")
  ai_Type_operation            String[]              @default([]) @map("ai_type_operation")
  ai_Type_document             String[]              @default([]) @map("ai_type_document")
  ai_Phase_projet              String[]              @default([]) @map("ai_phase_projet")
  ai_Version_document          String[]              @default([]) @map("ai_version_document")
  ai_Adresse_projet            String?               @default("") @map("ai_adresse_projet")
  ai_Ville_projet              String?               @default("") @map("ai_ville_projet")
  ai_Rue_projet                String?               @default("") @map("ai_rue_projet")
  ai_CP_projet                 String?               @default("") @map("ai_cp_projet")
  ai_Maitre_ouvrage            String[]              @default([]) @map("ai_maitre_ouvrage")
  ai_Architecte                String[]              @default([]) @map("ai_architecte")
  ai_Autres_societes           String[]              @default([]) @map("ai_autres_societes")
  ai_societe_editrice_document String[]              @default([]) @map("ai_societe_editrice_document")
  ai_metadata                  Json?                 @default("{}") @db.JsonB @map("ai_metadata")
  metadata_author              String?               @default("") @map("metadata_author")
  metadata_numPages            Int?                  @default(0) @map("metadata_num_pages")
  deliverables                 DocumentDeliverable[]

  version               Int                     @default(1)
  parentId              String? @map("parent_id")
  parent                Document?               @relation("DocumentVersions", fields: [parentId], references: [id])
  versions              Document[]              @relation("DocumentVersions")
  DocumentReferenceLink DocumentReferenceLink[]

  @@index([projectId])
  @@index([category])
  @@map("document")
}

model Chunk {
  id         String      @id @unique @default(uuid())
  text       String
  order      Int?
  page       Int?
  documentId String      @map("document_id")
  document   Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  embeddings Embedding[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@index([documentId])
  @@index([text], map: "chunk_text_idx")
  @@map("chunk")
}

model Embedding {
  id           String                       @id @unique @default(uuid())
  vector       Unsupported("vector(3072)")?
  modelName    String                       @map("model_name")
  modelVersion String                       @map("model_version")
  dimensions   Int
  chunkId      String                       @map("chunk_id")
  chunk        Chunk                        @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  createdAt    DateTime                     @default(now()) @map("created_at")
  updatedAt    DateTime                     @updatedAt @map("updated_at")
  usage        Int                          @default(0)

  @@unique([chunkId, modelName, modelVersion], name: "unique_chunk_model")
  @@index([chunkId])
  @@index([vector], map: "embedding_vector_idx")
  @@map("embedding")
}

model Usage {
  id               String      @id @unique @default(uuid())
  provider         AI_Provider @default(NOT_SPECIFIED)
  modelName        String      @map("model_name")
  promptTokens     Int?        @map("prompt_tokens")
  completionTokens Int?        @map("completion_tokens")
  totalTokens      Int?        @map("total_tokens")
  type             UsageType
  projectId        String      @map("project_id")
  project          Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  @@index([projectId])
  @@index([modelName])
  @@index([type])
  @@map("usage")
}

model Deliverable {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  new         Boolean @default(false)
  user_prompt String? @default("") @map("user_prompt")

  type DeliverableType

  status  Status  @default(DRAFT)
  code    Int?    @default(0)
  message String? @default("")

  process_duration_in_seconds Float? @default(0) @map("process_duration_in_seconds")

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")

  // Document references
  documents DocumentDeliverable[]

  short_result Json? @default("{}") @db.JsonB @map("short_result")
  long_result  Json? @default("{}") @db.JsonB @map("long_result")

  @@index([projectId])
  @@index([type])
  @@index([status])
  @@map("deliverable")
}

// Junction table for Many-to-Many relation between Document and Deliverable
model DocumentDeliverable {
  id            String      @id @unique @default(uuid())
  document      Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String      @map("document_id")
  deliverable   Deliverable @relation(fields: [deliverableId], references: [id], onDelete: Cascade)
  deliverableId String      @map("deliverable_id")

  // Additional metadata about the document usage in this deliverable
  usage String? // e.g., "primary", "reference", "appendix"

  @@unique([documentId, deliverableId])
  @@index([documentId])
  @@index([deliverableId])
  @@map("document_deliverable")
}

model ReferenceDocument {
  id                        String                       @id @default(uuid())
  title                     String                       @default("") // Official title of the reference document
  secondary_title           String?                      @default("") @map("secondary_title") // Secondary title of the reference document
  key_s3_title              String                       @default("") @map("key_s3_title") // Key of the reference document in S3
  application_domain        String? @map("application_domain") // ex: "maçonnerie", "ossature bois", etc.
  application_domain_vector Unsupported("vector(3072)")? @map("application_domain_vector") // Embedding for semantic search on domain
  category                  String? // ex: "NF DTU", "Eurocode", "RE2020"
  mistral_ocr_result        Json?                        @default("{}") @db.JsonB
  official_version          String? @map("official_version") // ex: "NF DTU 24.1 P1-1 2020"
  organization              String? // ex: "AFNOR"
  published_at              DateTime? @map("published_at")
  effective_date            DateTime? @map("effective_date")
  path                      String? // File storage path
  mimetype                  String?
  size                      Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chunks ReferenceChunk[] // Text chunks for AI analysis

  documentReferenceLinks DocumentReferenceLink[] // Links from user documents
  ReferenceImage         ReferenceImage[]

  @@index([category])
  @@map("reference_document")
}

model ReferenceChunk {
  id                  String               @id @default(uuid())
  text                String
  order               Int?
  page                Int?
  referenceDocumentId String @map("reference_document_id")
  referenceDocument   ReferenceDocument    @relation(fields: [referenceDocumentId], references: [id], onDelete: Cascade)
  embeddings          ReferenceEmbedding[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([referenceDocumentId])
  @@map("reference_chunk")
}

model ReferenceEmbedding {
  id               String                      @id @unique @default(uuid())
  vector           Unsupported("vector(3072)")
  modelName        String @map("model_name")
  modelVersion     String @map("model_version")
  dimensions       Int
  referenceChunkId String @map("reference_chunk_id")
  referenceChunk   ReferenceChunk              @relation(fields: [referenceChunkId], references: [id], onDelete: Cascade)
  createdAt        DateTime                    @default(now()) @map("created_at")
  updatedAt        DateTime                    @updatedAt @map("updated_at")

  @@unique([referenceChunkId, modelName, modelVersion], name: "unique_reference_chunk_model")
  @@index([referenceChunkId])
  @@index([vector], map: "reference_embedding_vector_idx")
  @@map("reference_embedding")
}

model ReferenceImage {
  id                  String   @id @unique @default(cuid())
  referenceDocumentId String   @map("reference_document_id") // lien vers ReferenceDocument
  pageIndex           Int      @map("page_index") // index de la page OCR
  topLeftX            Int?
  topLeftY            Int?
  bottomRightX        Int?
  bottomRightY        Int?
  imageData           Bytes?   @map("image_data") // ou String si tu stockes un chemin/URL
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  referenceDocument ReferenceDocument @relation(fields: [referenceDocumentId], references: [id], onDelete: Cascade)
  @@map("reference_image")
}

model DocumentReferenceLink {
  id                  String   @id @default(uuid())
  documentId          String   @map("document_id")
  referenceDocumentId String   @map("reference_document_id")
  comment             String? // Comment about the check/validation
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  document          Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  referenceDocument ReferenceDocument @relation(fields: [referenceDocumentId], references: [id], onDelete: Cascade)

  @@unique([documentId, referenceDocumentId])
  @@map("document_reference_link")
}

model ShortUrl {
  id        String   @id @default(uuid())
  shortId   String   @unique @map("short_id")
  longUrl   String   @map("long_url")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @default(dbgenerated("(now() + interval '1 hour')")) @map("expires_at")
  @@map("short_url")
}
