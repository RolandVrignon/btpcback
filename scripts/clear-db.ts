import { PrismaClient } from '@prisma/client';
import * as dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const prisma = new PrismaClient();

/**
 * Nettoie toutes les tables de la base de donn√©es sauf Organization et ApiKey
 */
async function clearDatabase() {
  try {
    console.log('Nettoyage de la base de donn√©es...');
    console.log('Conservation des tables Organization et ApiKey');

    // Supprimer les donn√©es dans l'ordre pour respecter les contraintes de cl√© √©trang√®re
    console.log('Suppression des donn√©es de la table Usage...');
    await prisma.usage.deleteMany({});
    console.log('‚úÖ Table Usage vid√©e');

    console.log('Suppression des donn√©es de la table Embedding...');
    await prisma.embedding.deleteMany({});
    console.log('‚úÖ Table Embedding vid√©e');

    console.log('Suppression des donn√©es de la table Chunk...');
    await prisma.chunk.deleteMany({});
    console.log('‚úÖ Table Chunk vid√©e');

    console.log('Suppression des donn√©es de la table Document...');
    await prisma.document.deleteMany({});
    console.log('‚úÖ Table Document vid√©e');

    console.log('Suppression des donn√©es de la table Project...');
    await prisma.project.deleteMany({});
    console.log('‚úÖ Table Project vid√©e');

    console.log('Suppression des donn√©es de la table Deliverable...');
    await prisma.deliverable.deleteMany({});
    console.log('‚úÖ Table Deliverable vid√©e');

    console.log('Suppression des donn√©es de la table DocumentDeliverable...');
    await prisma.documentDeliverable.deleteMany({});
    console.log('‚úÖ Table DocumentDeliverable vid√©e');

    console.log('\nüéâ Base de donn√©es nettoy√©e avec succ√®s !');
    console.log('Les tables Organization et ApiKey ont √©t√© pr√©serv√©es.');
  } catch (error) {
    console.error('Erreur lors du nettoyage de la base de donn√©es:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la fonction
void clearDatabase();
