import {
  Injectable,
  NotFoundException,
  ForbiddenException,
  BadRequestException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateDocumentDto } from './dto/create-document.dto';
import { Project, Status, AI_Provider } from '@prisma/client';
import { UpdateDocumentDto } from './dto/update-document.dto';
import { ConfigService } from '@nestjs/config';
import {
  S3Client,
  HeadObjectCommand,
  S3ServiceException,
} from '@aws-sdk/client-s3';
import { ConfirmUploadDto } from './dto/confirm-upload.dto';
import { ViewDocumentDto } from './dto/view-document.dto';
import { ViewDocumentResponseDto } from './dto/view-document-response.dto';
import { GetObjectCommand } from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';
import { ChunksService } from '../chunks/chunks.service';
import { EmbeddingsService } from '../embeddings/embeddings.service';
import { UsageService } from '../usage/usage.service';
import { DocumentsRepository } from './documents.repository';
import * as fs from 'fs';
import * as path from 'path';
import { Readable } from 'stream';
import { finished } from 'stream/promises';
import { promisify } from 'util';
import { exec as execCallback } from 'child_process';
import { openai } from '@ai-sdk/openai';
import { embed } from 'ai';
import * as os from 'os';

@Injectable()
export class DocumentsService {
  private s3Client: S3Client;
  private bucketName: string;

  constructor(
    private prisma: PrismaService,
    private configService: ConfigService,
    private usageService: UsageService,
    private readonly documentsRepository: DocumentsRepository,
    private readonly embeddingsService: EmbeddingsService,
    private readonly chunksService: ChunksService,
  ) {
    this.s3Client = new S3Client({
      region: this.configService.get<string>('AWS_REGION', 'eu-west-3'),
      credentials: {
        accessKeyId: this.configService.get<string>('AWS_ACCESS_KEY_ID', ''),
        secretAccessKey: this.configService.get<string>(
          'AWS_SECRET_ACCESS_KEY',
          '',
        ),
      },
    });
    this.bucketName = this.configService.get<string>(
      'AWS_S3_BUCKET',
      'btpc-documents',
    );
  }

  async create(createDocumentDto: CreateDocumentDto) {
    return this.documentsRepository.create(createDocumentDto);
  }

  async findAll() {
    return this.documentsRepository.findAll();
  }

  async findAllByOrganization(organizationId: string) {
    return this.documentsRepository.findAllByOrganization(organizationId);
  }

  async findOne(id: string) {
    return this.documentsRepository.findOne(id);
  }

  async findByProject(projectId: string) {
    return this.documentsRepository.findByProject(projectId);
  }

  async update(id: string, updateDocumentDto: UpdateDocumentDto) {
    return this.documentsRepository.update(id, updateDocumentDto);
  }

  async remove(id: string) {
    return this.documentsRepository.remove(id);
  }

  async updateStatus(documentId: string, status: Status) {
    return this.documentsRepository.updateStatus(documentId, status);
  }

  async findByFilenameAndProject(
    projectId: string,
    fileName: string,
    filePath: string,
  ) {
    return this.documentsRepository.findByFilenameAndProject(
      projectId,
      fileName,
      filePath,
    );
  }

  async updateAiMetadata(
    documentId: string,
    metadata: Record<string, unknown>,
  ) {
    return this.documentsRepository.updateAiMetadata(documentId, metadata);
  }

  /**
   * Traite un document pour en extraire le texte, créer des chunks et générer des embeddings
   * @param documentId ID du document à traiter
   * @param projectId ID du projet associé
   */
  async processDocument(documentId: string, projectId: string): Promise<void> {
    // Créer un répertoire temporaire pour les fichiers
    const tempDir = path.join(os.tmpdir(), `document-${documentId}`);
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    try {
      // Mettre à jour le statut du document à INDEXING
      await this.updateStatus(documentId, 'INDEXING');

      // Étape 1: Télécharger le document depuis S3
      const document = await this.findOne(documentId);
      const tempFilePath = path.join(tempDir, document.filename);
      // Utiliser le service S3 pour télécharger le fichier
      await this.downloadFile(document.path, tempFilePath);
      console.log('tempFilePath:', tempFilePath);

      // Étape 2: Convertir le document si nécessaire
      const pdfFilePath = await this.convertToPdfIfNeeded(tempFilePath);
      console.log('pdfFilePath:', pdfFilePath);

      // Étape 3: Extraire le texte du PDF par page
      const pageTexts = await this.extractTextFromPdf(pdfFilePath);
      console.log('Nombre de pages extraites:', pageTexts.length);

      // Étape 4: Chunker le texte en préservant l'information de page
      const chunks = this.chunkText(pageTexts, 1000);
      console.log('Nombre de chunks créés:', chunks.length);

      // Étape 5: Créer les chunks dans la base de données avec leur numéro de page
      await this.createChunksWithEmbeddings(chunks, documentId, projectId);

      // Étape 6: Rafting - Extraire les informations importantes avec Gemini
      await this.updateStatus(documentId, 'RAFTING' as Status);

      // Concaténer tous les textes des pages pour l'analyse globale
      const extractedText = pageTexts.map((pt) => pt.text).join('\n\n');

      await this.extractDocumentInfoWithGemini(
        extractedText,
        documentId,
        projectId,
      );

      // Mettre à jour le statut du document à READY
      await this.updateStatus(documentId, 'READY');

      // Nettoyer les fichiers temporaires
      await this.cleanupTempFiles(tempDir);
    } catch (error) {
      console.error(
        `Erreur lors du traitement du document ${documentId}:`,
        error instanceof Error ? error.message : String(error),
      );
      // En cas d'erreur, mettre à jour le statut du document à END
      await this.updateStatus(documentId, 'END');
    }
  }

  /**
   * Analyse un document avec un modèle de langage
   */
  async analyzeDocument(documentId: string, model: string) {
    try {
      // Récupérer le document
      const document = await this.documentsRepository.findOne(documentId);

      // Mettre à jour le statut du document
      await this.documentsRepository.updateStatus(
        documentId,
        'PROCESSING' as Status,
      );

      // Logique pour analyser le document...
      // Cette partie dépend de l'implémentation spécifique pour analyser le document

      // Enregistrer l'utilisation du modèle
      const usage = {
        totalTokens: 2000, // Exemple, à remplacer par la valeur réelle
      };
      await this.usageService.logTextToTextUsage(
        'GEMINI' as AI_Provider,
        model,
        usage,
        document.projectId,
      );

      // Mettre à jour le statut du document une fois l'analyse terminée
      await this.documentsRepository.updateStatus(
        documentId,
        'READY' as Status,
      );

      return { success: true, message: 'Document analysé avec succès' };
    } catch (error) {
      // En cas d'erreur, mettre à jour le statut du document
      try {
        await this.documentsRepository.updateStatus(
          documentId,
          'END' as Status,
        );
      } catch (updateError) {
        console.error(
          'Erreur lors de la mise à jour du statut du document:',
          updateError,
        );
      }
      if (error instanceof NotFoundException) {
        throw error;
      }
      throw new Error(
        `Erreur lors de l'analyse du document: ${(error as Error).message}`,
      );
    }
  }

  /**
   * Confirme l'upload d'un fichier sur S3 et crée un document dans la base de données
   * @param dto Informations sur le fichier uploadé
   * @param organizationId ID de l'organisation qui fait la demande
   * @returns Le document créé
   * @throws NotFoundException si le projet n'existe pas ou si le fichier n'est pas trouvé sur S3
   * @throws ForbiddenException si le projet n'appartient pas à l'organisation
   * @throws BadRequestException si une erreur survient lors de la vérification du fichier
   */
  async confirmUpload(dto: ConfirmUploadDto, organizationId: string) {
    // Vérifier si le projet existe et appartient à l'organisation
    const project = await this.prisma.project.findFirst({
      where: {
        id: dto.projectId,
        organization: {
          id: organizationId,
        },
      },
    });

    if (!project) {
      throw new NotFoundException(
        "Projet non trouvé ou n'appartient pas à votre organisation",
      );
    }

    // Construire le chemin du fichier sur S3
    const filePath = `ct-toolbox/${dto.projectId}/${dto.fileName}`;
    console.log('filePath:', filePath);

    try {
      // Vérifier si le fichier existe sur S3
      const headObjectCommand = new HeadObjectCommand({
        Bucket: this.bucketName,
        Key: filePath,
      });

      await this.s3Client.send(headObjectCommand);

      // Si le fichier existe, créer un document dans la base de données
      const document = await this.prisma.document.create({
        data: {
          filename: dto.fileName,
          path: filePath,
          mimetype: 'application/octet-stream', // À déterminer en fonction du nom de fichier
          size: 0, // Taille inconnue à ce stade
          projectId: dto.projectId,
          status: 'NOT_STARTED', // Statut initial
        },
        include: {
          project: true,
        },
      });

      // Lancer le traitement du document en arrière-plan seulement pour PDF ou DOCX
      const fileExt = path.extname(dto.fileName).toLowerCase();
      if (fileExt === '.pdf' || fileExt === '.docx' || fileExt === '.doc') {
        void this.processDocumentAsync(document.id, project.id);
      }

      return document;
    } catch (error) {
      if (error instanceof S3ServiceException) {
        throw new BadRequestException(
          `Fichier non trouvé sur S3: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
        );
      }
      throw error;
    }
  }

  /**
   * Traite un document de manière asynchrone en suivant les étapes:
   * 1. Téléchargement du document depuis S3
   * 2. Conversion si nécessaire (docx -> pdf)
   * 3. Extraction du texte
   * 4. Chunking du texte
   * 5. Création des chunks dans la base de données
   * 6. Vectorisation et création des embeddings
   * 7. Rafting - Extraire les informations importantes avec Gemini
   * 8. Mettre à jour le statut du document à READY
   * @param documentId ID du document à traiter
   */
  private async processDocumentAsync(
    documentId: string,
    projectId: string,
  ): Promise<void> {
    try {
      // Mettre à jour le statut du document à PROCESSING
      await this.updateStatus(documentId, 'INDEXING' as Status);

      // Récupérer les informations du document
      const document = await this.findOne(documentId);

      if (!document) {
        throw new NotFoundException(
          `Document avec l'ID ${documentId} non trouvé`,
        );
      }

      // Étape 1: Télécharger le document depuis S3
      const tempDir = `/tmp/document-processing/${documentId}`;
      const tempFilePath = await this.downloadDocumentFromS3(
        document.path,
        tempDir,
      );

      console.log('tempFilePath:', tempFilePath);

      // Étape 2: Convertir le document si nécessaire
      const pdfFilePath = await this.convertToPdfIfNeeded(tempFilePath);
      console.log('pdfFilePath:', pdfFilePath);

      // Étape 3: Extraire le texte du PDF
      const extractedText = await this.extractTextFromPdf(pdfFilePath);
      console.log('extractedText:', extractedText);

      // Étape 4: Chunker le texte
      const chunks = this.chunkText(extractedText, 1000);
      console.log('chunks:', chunks);

      // Étape 5: Créer les chunks dans la base de données
      await this.createChunksWithEmbeddings(chunks, documentId, projectId);

      // Étape 7: Rafting - Extraire les informations importantes avec Gemini
      await this.updateStatus(documentId, 'RAFTING' as Status);
      await this.extractDocumentInfoWithGemini(
        extractedText,
        documentId,
        projectId,
      );

      // Mettre à jour le statut du document à READY
      await this.updateStatus(documentId, 'READY');

      // Nettoyer les fichiers temporaires
      await this.cleanupTempFiles(tempDir);
    } catch (error) {
      console.error(
        `Erreur lors du traitement du document ${documentId}:`,
        error,
      );
      // En cas d'erreur, mettre à jour le statut du document à END
      await this.updateStatus(documentId, 'END');
    }
  }

  /**
   * Extrait les informations importantes d'un document en utilisant Gemini
   * @param text Texte du document
   * @param documentId ID du document
   * @param projectId ID du projet
   */
  private async extractDocumentInfoWithGemini(
    text: string,
    documentId: string,
    projectId: string,
  ): Promise<void> {
    try {
      // Implémentation de l'extraction d'informations avec Gemini
      console.log(`Extraction d'informations pour le document ${documentId}`);

      // Ici, vous pouvez ajouter votre logique d'extraction avec Gemini
      // Exemple d'utilisation du projectId pour enregistrer l'utilisation de l'API
      await this.usageService.create({
        provider: AI_Provider.GEMINI,
        modelName: 'gemini-1.5-pro',
        totalTokens: 0, // À remplacer par la valeur réelle
        type: 'TEXT_TO_TEXT',
        projectId: projectId,
      });

      console.log(
        `Extraction d'informations terminée pour le document ${documentId}`,
      );
    } catch (error) {
      console.error(
        `Erreur lors de l'extraction d'informations avec Gemini:`,
        error instanceof Error ? error.message : String(error),
      );
      throw new Error(
        `Échec de l'extraction d'informations: ${
          error instanceof Error ? error.message : String(error)
        }`,
      );
    }
  }

  /**
   * Crée les chunks dans la base de données et génère leurs embeddings
   * @param textChunks Tableau de chunks de texte avec leur numéro de page
   * @param documentId ID du document associé
   * @param projectId ID du projet associé
   * @returns Tableau des chunks créés avec leurs embeddings
   */
  private async createChunksWithEmbeddings(
    textChunks: Array<{ text: string; page: number }>,
    documentId: string,
    projectId: string,
  ): Promise<{ id: string; text: string }[]> {
    try {
      // Récupérer la clé API OpenAI une seule fois
      const apiKey = this.configService.get<string>('OPENAI_API_KEY');
      if (!apiKey) {
        throw new Error("La clé API OpenAI n'est pas configurée");
      }

      // Configurer le client OpenAI avec la clé API
      process.env.OPENAI_API_KEY = apiKey;
      const modelName = 'text-embedding-3-small';

      // Traiter tous les chunks en parallèle
      const results = await Promise.all(
        textChunks.map(async (chunk) => {
          try {
            // 1. Créer le chunk dans la base de données
            const createdChunk = await this.chunksService.create({
              text: chunk.text,
              page: chunk.page,
              documentId,
            });

            // 2. Générer l'embedding pour ce chunk
            const { embedding: embeddingVector, usage } = await embed({
              model: openai.embedding(modelName),
              value: chunk.text,
            });

            // 3. Créer l'embedding dans la base de données
            await this.embeddingsService.create({
              provider: AI_Provider.OPENAI,
              vector: embeddingVector,
              modelName: modelName,
              modelVersion: 'v1',
              dimensions: embeddingVector.length,
              chunkId: createdChunk.id,
              usage: usage.tokens,
              projectId: projectId,
            });

            return {
              id: createdChunk.id,
              text: chunk.text,
            };
          } catch (error) {
            console.error(
              `Erreur lors de la création du chunk et de l'embedding:`,
              error,
            );
            throw error;
          }
        }),
      );

      return results;
    } catch (error) {
      console.error(
        `Erreur lors de la création des chunks et des embeddings:`,
        error,
      );
      throw error;
    }
  }

  /**
   * Récupère le statut actuel d'un document
   * @param documentId ID du document
   * @param projectId ID du projet
   * @param organizationId ID de l'organisation
   * @returns Le document avec son statut actuel
   */
  async monitorStatus(
    documentId: string,
    projectId: string,
    organizationId: string,
  ) {
    // Vérifier si le projet existe et appartient à l'organisation
    await this.checkProjectAccess(projectId, organizationId);

    // Récupérer le document
    const document = await this.prisma.document.findUnique({
      where: { id: documentId },
      select: {
        id: true,
        filename: true,
        status: true,
        projectId: true,
        createdAt: true,
        updatedAt: true,
      },
    });

    if (!document) {
      throw new NotFoundException(
        `Document avec l'ID ${documentId} non trouvé`,
      );
    }

    if (document.projectId !== projectId) {
      throw new ForbiddenException(
        "Ce document n'appartient pas au projet spécifié",
      );
    }

    return {
      ...document,
      message: this.getStatusMessage(document.status),
    };
  }

  /**
   * Génère un message explicatif basé sur le statut du document
   * @param status Statut du document
   * @returns Message explicatif
   */
  private getStatusMessage(status: Status): string {
    switch (status) {
      case 'NOT_STARTED':
        return 'Le document est en attente de traitement';
      case 'PROCESSING':
        return 'Le document est en cours de traitement';
      case 'INDEXING':
        return 'Le document est en cours de vectorisation';
      case 'RAFTING':
        return 'Le document est en cours de résumé';
      case 'READY':
        return 'Le document est prêt à être utilisé';
      case 'END':
        return 'Une erreur est survenue lors du traitement du document';
      default:
        return 'Statut inconnu';
    }
  }

  async checkProjectAccess(projectId: string, organizationId: string) {
    const project = await this.prisma.project.findUnique({
      where: { id: projectId },
      include: {
        organization: true,
      },
    });

    if (!project) {
      throw new NotFoundException('Projet non trouvé');
    }

    const projectWithOrg = project as Project & { organizationId: string };
    if (projectWithOrg.organizationId !== organizationId) {
      throw new ForbiddenException('Accès non autorisé à ce projet');
    }

    return project;
  }

  /**
   * Génère une URL présignée pour consulter un document
   * @param dto Informations sur le document à consulter
   * @param organizationId ID de l'organisation qui fait la demande
   * @returns URL présignée pour consulter le document
   * @throws NotFoundException si le projet n'existe pas ou si le fichier n'existe pas
   * @throws ForbiddenException si le projet n'appartient pas à l'organisation
   */
  async getViewUrl(
    dto: ViewDocumentDto,
    organizationId: string,
  ): Promise<ViewDocumentResponseDto> {
    // Vérifier si le projet existe et appartient à l'organisation
    await this.checkProjectAccess(dto.projectId, organizationId);

    // Construire le chemin du fichier sur S3
    const filePath = `ct-toolbox/${dto.projectId}/${dto.fileName}`;

    try {
      // Vérifier si le fichier existe sur S3
      const headObjectCommand = new HeadObjectCommand({
        Bucket: this.bucketName,
        Key: filePath,
      });

      await this.s3Client.send(headObjectCommand);

      // Générer l'URL présignée pour consulter le document
      const command = new GetObjectCommand({
        Bucket: this.bucketName,
        Key: filePath,
      });

      const expiresIn = 3600; // 1 heure
      const url = await getSignedUrl(this.s3Client, command, { expiresIn });

      return {
        url,
        expiresIn,
      };
    } catch (error) {
      if (error instanceof S3ServiceException) {
        throw new NotFoundException(
          `Fichier non trouvé sur S3: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
        );
      }
      throw error;
    }
  }

  /**
   * Télécharge un document depuis S3 et le stocke dans un répertoire temporaire
   * @param s3Path Chemin du document dans S3
   * @param tempDir Répertoire temporaire où stocker le document
   * @returns Chemin du fichier téléchargé
   */
  private async downloadDocumentFromS3(
    s3Path: string,
    tempDir: string,
  ): Promise<string> {
    // Créer le répertoire temporaire s'il n'existe pas
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    // Récupérer le nom du fichier à partir du chemin S3
    const fileName = path.basename(s3Path);
    const tempFilePath = path.join(tempDir, fileName);

    // Télécharger le fichier depuis S3
    const command = new GetObjectCommand({
      Bucket: this.bucketName,
      Key: s3Path,
    });

    const response = await this.s3Client.send(command);

    // Écrire le contenu dans un fichier temporaire
    const writeStream = fs.createWriteStream(tempFilePath);
    const readStream = Readable.from(response.Body as any);

    await finished(readStream.pipe(writeStream));

    return tempFilePath;
  }

  /**
   * Convertit un document en PDF si nécessaire (pour les fichiers docx)
   * @param filePath Chemin du fichier à convertir
   * @returns Chemin du fichier PDF (soit le même si c'était déjà un PDF, soit le nouveau)
   */
  private async convertToPdfIfNeeded(filePath: string): Promise<string> {
    const fileExt = path.extname(filePath).toLowerCase();

    // Si c'est déjà un PDF, retourner le chemin tel quel
    if (fileExt === '.pdf') {
      return filePath;
    }

    // Si c'est un docx, le convertir en PDF
    if (fileExt === '.docx' || fileExt === '.doc') {
      const outputPath = filePath.replace(/\.(docx|doc)$/i, '.pdf');

      // Utiliser LibreOffice pour convertir le document
      const exec = promisify(execCallback);
      const command = `libreoffice --headless --convert-to pdf --outdir "${path.dirname(filePath)}" "${filePath}"`;

      try {
        await exec(command);
        return outputPath;
      } catch (error) {
        console.error('Erreur lors de la conversion du document:', error);
        throw new Error(
          `Échec de la conversion du document: ${(error as Error).message}`,
        );
      }
    }

    // Pour les autres types de fichiers, lever une erreur
    throw new Error(`Type de fichier non pris en charge: ${fileExt}`);
  }

  /**
   * Extrait le texte d'un fichier PDF en le divisant par page
   * @param pdfPath Chemin vers le fichier PDF
   * @returns Tableau d'objets contenant le texte et le numéro de page
   */
  private async extractTextFromPdf(
    pdfPath: string,
  ): Promise<Array<{ text: string; page: number }>> {
    const exec = promisify(execCallback);
    const tempDir = path.dirname(pdfPath);
    const baseName = path.basename(pdfPath, '.pdf');
    const outputPattern = path.join(tempDir, `${baseName}-%d.txt`);

    // Utiliser pdftotext avec l'option -f 1 -l 0 pour extraire toutes les pages
    // et l'option -layout pour préserver la mise en page
    // %d dans le nom de fichier de sortie sera remplacé par le numéro de page
    const command = `pdftotext -f 1 -l 0 -layout -htmlmeta "${pdfPath}" "${outputPattern}"`;

    try {
      await exec(command);

      // Trouver tous les fichiers texte générés
      const files = fs.readdirSync(tempDir)
        .filter(
          (file) => file.startsWith(`${baseName}-`) && file.endsWith('.txt'),
        )
        .sort((a, b) => {
          // Extraire les numéros de page des noms de fichiers
          const pageA = parseInt(
            a.replace(`${baseName}-`, '').replace('.txt', ''),
          );
          const pageB = parseInt(
            b.replace(`${baseName}-`, '').replace('.txt', ''),
          );
          return pageA - pageB;
        });

      // Lire chaque fichier et créer un objet avec le texte et le numéro de page
      const result = files.map((file) => {
        const pageNum = parseInt(
          file.replace(`${baseName}-`, '').replace('.txt', ''),
        );
        const filePath = path.join(tempDir, file);
        const text = fs.readFileSync(filePath, 'utf8');

        // Supprimer le fichier texte temporaire
        fs.unlinkSync(filePath);

        return {
          text,
          page: pageNum,
        };
      });

      return result;
    } catch (error) {
      console.error("Erreur lors de l'extraction du texte:", error);
      throw new Error(
        `Échec de l'extraction du texte: ${(error as Error).message}`,
      );
    }
  }

  /**
   * Divise le texte en chunks de taille fixe
   * @param pageTexts Tableau d'objets contenant le texte et le numéro de page
   * @param chunkSize Taille maximale de chaque chunk
   * @returns Tableau d'objets contenant le texte du chunk et le numéro de page
   */
  private chunkText(
    pageTexts: Array<{ text: string; page: number }>,
    chunkSize: number,
  ): Array<{ text: string; page: number }> {
    const chunks: Array<{ text: string; page: number }> = [];

    // Traiter chaque page séparément
    for (const pageData of pageTexts) {
      const { text, page } = pageData;

      // Diviser le texte en paragraphes
      const paragraphs = text.split(/\n\s*\n/);

      let currentChunk = '';

      for (const paragraph of paragraphs) {
        // Si le paragraphe est plus grand que la taille de chunk, le diviser
        if (paragraph.length > chunkSize) {
          // Ajouter le chunk courant s'il n'est pas vide
          if (currentChunk) {
            chunks.push({ text: currentChunk, page });
            currentChunk = '';
          }

          // Diviser le paragraphe en chunks de taille fixe
          let i = 0;
          while (i < paragraph.length) {
            chunks.push({
              text: paragraph.substring(i, i + chunkSize),
              page,
            });
            i += chunkSize;
          }
        } else if (currentChunk.length + paragraph.length + 2 > chunkSize) {
          // Si ajouter ce paragraphe dépasse la taille du chunk, créer un nouveau chunk
          chunks.push({ text: currentChunk, page });
          currentChunk = paragraph;
        } else {
          // Sinon, ajouter le paragraphe au chunk courant
          if (currentChunk) {
            currentChunk += '\n\n';
          }
          currentChunk += paragraph;
        }
      }

      // Ajouter le dernier chunk s'il n'est pas vide
      if (currentChunk) {
        chunks.push({ text: currentChunk, page });
      }
    }

    return chunks;
  }

  /**
   * Nettoie les fichiers temporaires
   * @param tempDir Répertoire temporaire à nettoyer
   */
  private async cleanupTempFiles(tempDir: string) {
    if (fs.existsSync(tempDir)) {
      await fs.promises.rm(tempDir, { recursive: true, force: true });
    }
  }

  /**
   * Récupère les métadonnées AI d'un document
   * @param projectId ID du projet
   * @param fileName Nom du fichier
   * @param organizationId ID de l'organisation
   * @returns Les métadonnées AI du document
   * @throws NotFoundException si le document n'est pas trouvé
   * @throws ForbiddenException si le document n'appartient pas à l'organisation
   */
  async getDocumentMetadata(
    projectId: string,
    fileName: string,
    organizationId: string,
  ) {
    // Vérifier si le projet existe et appartient à l'organisation
    await this.checkProjectAccess(projectId, organizationId);

    // Construire le chemin du fichier sur S3
    const filePath = `ct-toolbox/${projectId}/${fileName}`;

    // Rechercher le document dans la base de données
    const document = await this.prisma.document.findFirst({
      where: {
        projectId,
        filename: fileName,
        path: filePath,
      },
      select: {
        id: true,
        filename: true,
        status: true,
        ai_metadata: true,
      },
    });

    if (!document) {
      throw new NotFoundException(
        `